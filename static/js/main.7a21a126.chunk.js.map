{"version":3,"sources":["components/Navbar.js","components/Counter.js","App.js","registerServiceWorker.js","index.js"],"names":["Navbar","className","Counter","props","counter1","counter2","increaseOne","decreaseOne","increaseTwo","decreaseTwo","reset","id","onClick","App","state","bind","this","setState","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7a21a126.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = () => {\n    return (\n        <nav className = \"navbar navbar-dark bg-dark\">\n            <h5 className = \"navbar-brand\">React Mini-Project: Simple Counter</h5>\n        </nav>\n    )\n}\n\nexport default Navbar;","import React from 'react';\n\nconst Counter = (props) => {\n\tconst {\n\t\tcounter1,\n\t\tcounter2,\n\t\tincreaseOne,\n\t\tdecreaseOne,\n\t\tincreaseTwo,\n\t\tdecreaseTwo,\n\t\treset,\n\t} = props;\n\n\treturn (\n\t\t<div className='card'>\n\t\t\t<div className='card-header'>Simple Counter</div>\n\t\t\t<div className='card-body'>\n\t\t\t\t<div className='row'>\n\t\t\t\t\t<div className='col-sm'>\n\t\t\t\t\t\t<h1>Total: {counter1}</h1>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tclassName='btn btn-primary'\n\t\t\t\t\t\t\tid='inc-btn-one'\n\t\t\t\t\t\t\tonClick={increaseOne}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tIncrease\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tclassName='btn btn-primary'\n\t\t\t\t\t\t\tid='dec-btn-one'\n\t\t\t\t\t\t\tonClick={decreaseOne}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tDecrease\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='col-sm'>\n\t\t\t\t\t\t<h1>Total: {counter2}</h1>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tclassName='btn btn-primary'\n\t\t\t\t\t\t\tid='inc-btn-two'\n\t\t\t\t\t\t\tonClick={increaseTwo}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tIncrease\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\tclassName='btn btn-primary'\n\t\t\t\t\t\t\tid='dec-btn-two'\n\t\t\t\t\t\t\tonClick={decreaseTwo}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tDecrease\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='card-footer'>\n\t\t\t\t<a className='btn btn-primary' onClick={reset}>\n\t\t\t\t\tReset\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Counter from './components/Counter';\n\nclass App extends Component { \n  constructor(){\n    super();\n\n    this.state = {\n        counter1: 0,\n        counter2: 0\n    }\n\n    this.increaseOne = this.increaseOne.bind(this);\n    this.increaseTwo = this.increaseTwo.bind(this);\n    this.decreaseOne = this.decreaseOne.bind(this);\n    this.decreaseTwo = this.decreaseTwo.bind(this);\n    this.reset = this.reset.bind(this);\n\n}\nincreaseOne() {\n    this.setState({\n        counter1: this.state.counter1 + 1\n    })\n}\n\nincreaseTwo() {\n    this.setState({\n        counter2: this.state.counter2 + 1\n    })\n}\n\ndecreaseOne() {\n    const counter = this.state.counter1;\n    if(counter === 0){\n        return false;\n    } else {\n        this.setState({\n            counter1: this.state.counter1 - 1\n        })\n    }\n}\ndecreaseTwo() {\n    const counter = this.state.counter2;\n    if(counter === 0){\n        return false;\n    } else {\n        this.setState({\n            counter2: this.state.counter2 - 1\n        })\n    }\n}\n\nreset() {\n    if(this.state.counter1 === 0 && this.state.counter2 === 0) {\n        return false;\n    } else {\n        this.setState({\n            counter1: 0,\n            counter2: 0\n        })\n    }\n}\n\n  render() {\n    return (\n      <div>\n        <Navbar />\n        <Counter increaseOne={this.increaseOne} increaseTwo={this.increaseTwo} decreaseOne={this.decreaseOne} decreaseTwo={this.decreaseTwo} reset={this.reset} counter1={this.state.counter1} counter2={this.state.counter2}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}